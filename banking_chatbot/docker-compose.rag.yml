# 🚀 Docker Compose - Sistema RAG Bancario
# Ubicación: /docker-compose.rag.yml
# Servicios necesarios para el sistema RAG

version: '3.8'

services:
  # ═══════════════════════════════════════════════════════════════
  # 🤖 BANKING CHATBOT API - Aplicación principal
  # ═══════════════════════════════════════════════════════════════
  chatbot-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: banking_chatbot_api
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./backend:/app/backend
    environment:
      # Database connections
      DATABASE_URL: postgresql://postgres:password123@postgres:5432/banking_chatbot
      REDIS_URL: redis://redis:6379/0
      QDRANT_URL: http://qdrant:6333

      # Application settings
      ENVIRONMENT: development
      DEBUG: "true"
      HOST: 0.0.0.0
      PORT: 8000

      # LLM Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY:-sk-your-key-here}
      OPENAI_MODEL: gpt-3.5-turbo
      OPENAI_TEMPERATURE: 0.7

      # Vector DB settings
      QDRANT_COLLECTION_NAME: banking_knowledge

      # Security
      JWT_SECRET_KEY: your-super-secret-jwt-key-change-in-production
      ENCRYPTION_KEY: your-32-char-encryption-key-here

      # Features
      ENABLE_AUTH: "false"
      ENABLE_MOCK_BANKING: "true"
      ENABLE_DLP: "false"

      # Logging
      LOG_LEVEL: INFO
      LOG_FORMAT: json
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - banking_network

  # ═══════════════════════════════════════════════════════════════
  # 📊 GRAFANA - Monitoring Dashboard
  # ═══════════════════════════════════════════════════════════════
  grafana:
    image: grafana/grafana:10.2.0
    container_name: banking_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    networks:
      - banking_network

  # ═══════════════════════════════════════════════════════════════
  # 📈 PROMETHEUS - Métricas
  # ═══════════════════════════════════════════════════════════════
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: banking_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--models.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--models.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - banking_network

  # ═══════════════════════════════════════════════════════════════
  # 🔍 ELASTICSEARCH - Logging avanzado (opcional)
  # ═══════════════════════════════════════════════════════════════
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: banking_elasticsearch
    restart: unless-stopped
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
      xpack.security.enabled: "false"
    networks:
      - banking_network
    profiles:
      - logging

  # ═══════════════════════════════════════════════════════════════
  # 📋 KIBANA - Log visualization (opcional)
  # ═══════════════════════════════════════════════════════════════
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: banking_kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - banking_network
    profiles:
      - logging

  # ═══════════════════════════════════════════════════════════════
  # 🌐 NGINX - Reverse Proxy y Load Balancer
  # ═══════════════════════════════════════════════════════════════
  nginx:
    image: nginx:1.25-alpine
    container_name: banking_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/ssl/certs
    depends_on:
      - chatbot-api
    networks:
      - banking_network
    profiles:
      - production

# ═══════════════════════════════════════════════════════════════
# 📦 VOLÚMENES PERSISTENTES
# ═══════════════════════════════════════════════════════════════
volumes:
  qdrant_storage:
    driver: local
    name: banking_qdrant_data
  postgres_data:
    driver: local
    name: banking_postgres_data
  redis_data:
    driver: local
    name: banking_redis_data
  grafana_data:
    driver: local
    name: banking_grafana_data
  prometheus_data:
    driver: local
    name: banking_prometheus_data
  elasticsearch_data:
    driver: local
    name: banking_elasticsearch_data

# ═══════════════════════════════════════════════════════════════
# 🌐 REDES
# ═══════════════════════════════════════════════════════════════
networks:
  banking_network:
    driver: bridge
    name: banking_network
    ipam:
      config:
        - subnet: 172.20.0.0/16

  # ═══════════════════════════════════════════════════════════════
  # 📝 CONFIGURACIONES ADICIONALES
  # ═══════════════════════════════════════════════════════════════

  # Para usar perfiles específicos:
  # docker-compose -f docker-compose.rag.yml up                    # Servicios básicos
  # docker-compose -f docker-compose.rag.yml --profile logging up  # Con ELK stack
  # docker-compose -f docker-compose.rag.yml --profile production up # Con Nginx

  # Comandos útiles:
  # docker-compose -f docker-compose.rag.yml logs -f chatbot-api  # Ver logs de la API
  # docker-compose -f docker-compose.rag.yml exec qdrant /bin/sh  # Conectar a Qdrant
  # docker-compose -f docker-compose.rag.yml exec postgres psql -U postgres -d banking_chatbot  # Conectar a DB════════════════════════════════════════════
  # 🗄️ QDRANT - Vector Database
  # ═══════════════════════════════════════════════════════════════
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: banking_qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_storage:/qdrant/models
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__LOG_LEVEL: INFO
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:6333/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - banking_network

  # ═══════════════════════════════════════════════════════════════
  # 🗄️ POSTGRESQL - Metadatos y sesiones
  # ═══════════════════════════════════════════════════════════════
  postgres:
    image: postgres:15-alpine
    container_name: banking_postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_DB: banking_chatbot
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d banking_chatbot"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - banking_network

  # ═══════════════════════════════════════════════════════════════
  # 🔄 REDIS - Cache y sesiones
  # ═══════════════════════════════════════════════════════════════
  redis:
    image: redis:7-alpine
    container_name: banking_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - banking_network

  # ═══════════════════